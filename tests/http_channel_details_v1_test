import pytest
import requests
import json
from src import config


@pytest.fixture
def test_user1():
    '''
    Creates a test user and posts for use in testing.
    First user created, so global owner. 
    '''
    test_user1 = requests.post(f"{config.url}/auth/register/v2", json={
        'email': 'user1@gmail.com',
        'password': 'testpassword',
        'name_first': 'FirstName',
        'name_last': 'LastName',
    })
    user_data = test_user1.json()
    return user_data


def test_channel(test_user1):
    '''
    Create a new channel for use in testing.
    test_user1 is an owner.
    '''
    new_channel = requests.post(f"{config.url}channels/create/v2", json={
        "token": test_user1['token'],
        "name": "New Channel",
        "is_public": True
    })
    channel_data = new_channel.json()
    return channel_data


def test_channel_details_v2_success(test_user1, test_channel):
    '''
    Test to check correct response of a channel/details/v2 request
    '''
    requests.delete(f"{config.url}/clear/v1")

    response = requests.get(f'{config.url}channel/details/v2',
                            params={'token': test_user1['token'], 'channel_id': test_channel['channel_id']})
    response = response.json()
    assert response == {
        'name': test_channel['name'],
        'is_public': True,
        'owner_members': [{
            'u_id': test_user1['auth_user_id'],
            'email':test_user1['email'],
            'name_first':test_user1['name_first'],
            'name_last': test_user1['name_last'],
            'handle_str': test_user1['handle_str'],
        }],
        'all_members': [{
            'u_id': test_user1['auth_user_id'],
            'email':test_user1['email'],
            'name_first':test_user1['name_first'],
            'name_last': test_user1['name_last'],
            'handle_str': test_user1['handle_str'],
        }]
    }
    assert response.status_code == 200
